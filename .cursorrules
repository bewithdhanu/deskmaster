# 🖥️ **DeskMaster – Desktop Productivity Application**

### **Comprehensive system monitoring, timezone management, and settings control – all from your desktop.**

---

## 🚀 **1. Project Overview**

**DeskMaster** is a cross-platform productivity desktop application built with **Electron + React**, designed for system monitoring, multi-timezone management, and seamless tray-based interactions.

### **Core Stack**

| Layer         | Technology                  |
| ------------- | --------------------------- |
| Framework     | Electron v27                |
| Frontend      | React v18 + TailwindCSS     |
| Backend       | Node.js                     |
| Bundler       | Webpack                     |
| Visualization | Chart.js                    |
| Date/Time     | Moment.js + moment-timezone |

---

## 🧩 **2. Key Features**

### 🖥️ **System Monitoring**

* Real-time CPU, RAM, disk, and network tracking
* Temperature & battery indicators
* Performance graphs using Chart.js
* Configurable visibility for each metric

### 🌍 **World Clocks**

* Multiple timezone support with custom labels
* Interactive timeline (15-min intervals)
* Drag to adjust all clocks synchronously
* Custom date-time formats & persistence

### ⚙️ **Settings Management**

* Responsive grid (1–4 columns)
* Toggles for all system stats
* Timezone add/edit/remove
* Theme, auto-launch, and format preferences

### 🧭 **Tray Integration**

* Live system tray stats
* Theme-aware tray icons via `html2canvas`
* Show/hide toggle on click, context menu support

### 🎨 **User Interface**

* Dark/light/system themes with CSS variables
* Smooth transitions & custom scrollbars
* Persistent navigation tabs
* TailwindCSS-based modern design system

---

## 🧠 **3. Architecture Overview**

### **Structure**

```
dhanu-tools/
├── main.js               # Electron main process
├── stats.js              # System info collection
├── config.js             # Persistent configuration
├── src/                  # React source
│   ├── components/       # UI modules
│   └── index.js          # React entry
├── assets/               # Icons & resources
└── package.json
```

### **Core Modules**

| File                 | Purpose                                      |
| -------------------- | -------------------------------------------- |
| `main.js`            | Electron lifecycle, window/tray control, IPC |
| `stats.js`           | Collects & formats system info               |
| `config.js`          | Settings persistence (JSON)                  |
| `TrayIcon.js`        | Dynamic tray rendering                       |
| `Settings.js`        | UI for user preferences                      |
| `TimezoneManager.js` | Timezone list & timeline integration         |

---

## 🎨 **4. Theming & Design System**

### **Color Variables**

Dark and light mode CSS variables define consistent design tokens:

```css
--bg-primary: #1a1a1a; /* dark */ 
--bg-primary-light: #ffffff; /* light */
--accent-cpu: #ff4757;
--accent-ram: #3742fa;
--text-primary: #ffffff;
```

### **Component Standards**

* Use Tailwind utilities
* Cards: `bg-[var(--bg-card)]` + `border-[var(--border-color)]`
* Buttons: `.btn`, `.btn-primary`, `.btn-secondary`
* Modals: `.modal`, `.modal-content`, `.modal-header`
* Responsive & theme-aware at all breakpoints

---

## ⚡ **5. Development Standards**

### **Code Style**

| Area                 | Standard                                     |
| -------------------- | -------------------------------------------- |
| **JavaScript**       | [ESLint Standard](https://standardjs.com)    |
| **React Components** | Functional + Hooks (`useState`, `useEffect`) |
| **Async Code**       | `async/await` only, no callbacks             |
| **Naming**           | Descriptive, camelCase                       |
| **Formatting**       | Prettier config enforced                     |
| **Docs**             | JSDoc comments for complex logic             |

### **Styling**

* TailwindCSS for layout, spacing, and utilities
* CSS custom properties for theming
* Responsive first design
* Accessible contrast ratios (WCAG AA+)

### **Data & State Flow**

```text
stats.js → main.js → IPC → React Components → config.js (persist)
```

### **Error Handling**

* Use `try/catch` for all async ops
* Provide safe fallbacks
* Validate all IPC data
* Log errors in main process

### **Versioning**

* Follow **[Semantic Versioning (SemVer)](https://semver.org)**
  `MAJOR.MINOR.PATCH` (e.g. `1.3.2`)

---

## 🧱 **6. Build & Packaging**

| Command                   | Description                  |
| ------------------------- | ---------------------------- |
| `npm run dev`             | Live reload development mode |
| `npm run build-react`     | React build only             |
| `npm run build-mac-arm64` | Apple Silicon                |
| `npm run build-mac-x64`   | Intel macOS                  |
| `npm run build`           | Multi-platform build         |
| `npm run dist`            | Package app for distribution |

Built using **electron-builder** with signing, notarization, and platform packaging.

---

## 🧪 **7. Testing Guidelines**

### **Manual Testing Checklist**

* System stats refresh & accuracy
* Timezone adjustment correctness
* Theme switch & persistence
* Tray icon responsiveness
* Settings grid adaptability

### **Build Testing**

* macOS ARM64, x64, and universal binaries
* Configuration persistence after restart
* Auto-launch validation

---

## 🧭 **8. Git & PR Workflow (Standardized)**

### **Branching Model**

Follows [GitFlow](https://nvie.com/posts/a-successful-git-branching-model/) conventions with slight simplification:

| Branch Prefix | Purpose               | Example                    |
| ------------- | --------------------- | -------------------------- |
| `feature/`    | New feature           | `feature/timeline-drag`    |
| `fix/`        | Bug fix               | `fix/ram-chart-scale`      |
| `refactor/`   | Code restructure      | `refactor/config-module`   |
| `docs/`       | Documentation         | `docs/contributing-update` |
| `hotfix/`     | Urgent production fix | `hotfix/theme-freeze`      |

---

### **Commit Conventions**

Follow **[Conventional Commits](https://www.conventionalcommits.org)**:

```
<type>(scope?): <short summary>

- Optional details
- Benefits and changes
```

**Types:** `feat`, `fix`, `docs`, `style`, `refactor`, `test`, `chore`, `build`

---

### **Pull Request Standards**

Each PR **must** include:

```markdown
## Description
Short summary of what’s changed.

## Changes
- ✅ Point 1
- ✅ Point 2

## Benefits
Why this improves UX or code quality.

## Testing
- [x] Manual test done
- [x] Verified build success

## Impact
Compatibility, risks, or dependencies.
```

---

### **Automated AI Workflow**

#### **When you say “create PR”:**

1. Analyze modified files
2. Create `feature/...` branch
3. Commit with proper Conventional Commit message
4. Push & open PR via GitHub CLI

#### **When you say “create PR and merge”:**

Performs the same + merges PR, deletes branch, and syncs `main`.

Example output:

```
✅ Created branch: feature/settings-grid-layout
✅ Opened PR: #45
✅ Merged to main
✅ Cleaned up local branch
```

---

### **Standard Commands**

```bash
# Create branch
git checkout -b feature/timeline-enhancement

# Commit
git add .
git commit -m "feat: improve timeline animation smoothness"

# Push & create PR
git push origin feature/timeline-enhancement
gh pr create --title "feat: improve timeline animation" --body "Enhanced marker smoothness and drag feedback."

# Merge
gh pr merge --merge --delete-branch
```

---

### **Rules Enforcement**

* 🚫 No direct commits to `main`
* ✅ All merges via PR
* 🔒 Branch protection: review + CI required
* 🔁 Local cleanup after merge
* 🧹 Keep `main` always deployable

---

## 🧰 **9. Tools Required**

* **Git**
* **GitHub CLI (`gh`)**
* **Node.js & npm**
* **Electron Builder**
* **Prettier / ESLint**

---

## ✅ **10. Summary**

* Follow **GitFlow** + **Conventional Commits**
* Maintain **code consistency** via ESLint & Prettier
* Use **feature branches** only
* Ensure **PR review & testing**
* Maintain **theme + performance consistency**
* Keep `main` stable and production-ready

---